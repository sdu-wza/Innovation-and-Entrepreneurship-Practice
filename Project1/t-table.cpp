
// SM4 T-Table 优化版本

#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>

#define rol(x, n) (((x) << (n)) | ((x) >> (32 - (n))))
#define bitsof(x) (CHAR_BIT * sizeof(x))

typedef uint32_t u32t;

// =========================
// SM4 SBOX 原始查表
// =========================
static const uint8_t sm4_sbox[256] = {
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};

// =========================
// T-Table 表（预计算每个字节位置的贡献）
// =========================
static u32t T0[256], T1[256], T2[256], T3[256];

// 基础版本的 T 变换函数
u32t sm4_t_sub(u32t a) {
    uint8_t a0 = (a >> 24) & 0xFF;
    uint8_t a1 = (a >> 16) & 0xFF;
    uint8_t a2 = (a >> 8) & 0xFF;
    uint8_t a3 = a & 0xFF;

    u32t b = (sm4_sbox[a0] << 24) | (sm4_sbox[a1] << 16) | (sm4_sbox[a2] << 8) | sm4_sbox[a3];

    return b ^ rol(b, 2) ^ rol(b, 10) ^ rol(b, 18) ^ rol(b, 24);
}

// 正确的 T 表初始化 - 为每个字节位置单独计算
void sm4_init_t_table() {
    for (int i = 0; i < 256; i++) {
        u32t sbox_val = sm4_sbox[i];
        
        // T0: 字节在位置0 (最高字节)
        u32t b0 = sbox_val << 24;
        T0[i] = b0 ^ rol(b0, 2) ^ rol(b0, 10) ^ rol(b0, 18) ^ rol(b0, 24);
        
        // T1: 字节在位置1
        u32t b1 = sbox_val << 16;
        T1[i] = b1 ^ rol(b1, 2) ^ rol(b1, 10) ^ rol(b1, 18) ^ rol(b1, 24);
        
        // T2: 字节在位置2
        u32t b2 = sbox_val << 8;
        T2[i] = b2 ^ rol(b2, 2) ^ rol(b2, 10) ^ rol(b2, 18) ^ rol(b2, 24);
        
        // T3: 字节在位置3 (最低字节)
        u32t b3 = sbox_val;
        T3[i] = b3 ^ rol(b3, 2) ^ rol(b3, 10) ^ rol(b3, 18) ^ rol(b3, 24);
    }
}

// T-Table 查找函数
u32t sm4_t_lookup(u32t a) {
    uint8_t a0 = (a >> 24) & 0xFF;
    uint8_t a1 = (a >> 16) & 0xFF;
    uint8_t a2 = (a >> 8) & 0xFF;
    uint8_t a3 = a & 0xFF;

    return T0[a0] ^ T1[a1] ^ T2[a2] ^ T3[a3];
}

#define SM4_CORE_4R(rk0, rk1, rk2, rk3)                         \
do {                                                          \
    tmp = m[1] ^ m[2] ^ m[3] ^ rk0; m[0] ^= sm4_t_sub(tmp); \
    tmp = m[2] ^ m[3] ^ m[0] ^ rk1; m[1] ^= sm4_t_sub(tmp); \
    tmp = m[3] ^ m[0] ^ m[1] ^ rk2; m[2] ^= sm4_t_sub(tmp); \
    tmp = m[0] ^ m[1] ^ m[2] ^ rk3; m[3] ^= sm4_t_sub(tmp); \
} while (0)

#define SM4_CORE_TT_4R(rk0, rk1, rk2, rk3)                        \
do {                                                            \
    tmp = m[1] ^ m[2] ^ m[3] ^ rk0; m[0] ^= sm4_t_lookup(tmp); \
    tmp = m[2] ^ m[3] ^ m[0] ^ rk1; m[1] ^= sm4_t_lookup(tmp); \
    tmp = m[3] ^ m[0] ^ m[1] ^ rk2; m[2] ^= sm4_t_lookup(tmp); \
    tmp = m[0] ^ m[1] ^ m[2] ^ rk3; m[3] ^= sm4_t_lookup(tmp); \
} while (0)

// 基础版本加密核心
void sm4_enc_core_basic(u32t *m, const u32t *rk) {
    u32t tmp;
    SM4_CORE_4R(rk[0], rk[1], rk[2], rk[3]);
    SM4_CORE_4R(rk[4], rk[5], rk[6], rk[7]);
    SM4_CORE_4R(rk[8], rk[9], rk[10], rk[11]);
    SM4_CORE_4R(rk[12], rk[13], rk[14], rk[15]);
    SM4_CORE_4R(rk[16], rk[17], rk[18], rk[19]);
    SM4_CORE_4R(rk[20], rk[21], rk[22], rk[23]);
    SM4_CORE_4R(rk[24], rk[25], rk[26], rk[27]);
    SM4_CORE_4R(rk[28], rk[29], rk[30], rk[31]);

    u32t tmp2 = m[0]; m[0] = m[3]; m[3] = tmp2;
    tmp2 = m[1]; m[1] = m[2]; m[2] = tmp2;
}

// T-Table 优化版加密核心
void sm4_enc_core_ttable(u32t *m, const u32t *rk) {
    u32t tmp;
    for (int i = 0; i < 32; i += 4) {
        SM4_CORE_TT_4R(rk[i], rk[i+1], rk[i+2], rk[i+3]);
    }
    u32t tmp2 = m[0]; m[0] = m[3]; m[3] = tmp2;
    tmp2 = m[1]; m[1] = m[2]; m[2] = tmp2;
}

// =========================
// 测试主函数
// =========================
int main() {
    // 初始化T表
    sm4_init_t_table();
    
    u32t m[4] = {0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210};
    u32t rk[32];
    
    // 初始化轮密钥
    for (int i = 0; i < 32; i++) rk[i] = i;

    // 测试T-Table优化版本
    sm4_enc_core_ttable(m, rk);
    printf("T-Table version result:\n");
    for (int i = 0; i < 4; i++) {
        printf("%08x ", m[i]);
    }
    printf("\n");

    return 0;
}
