pragma circom 2.1.6;

// 简单实现 Poseidon2 核心部分
// 注意：这是示例参数和简单的S-box实现，非安全生产参数！
// 请用论文或权威库的参数替换 round_constants 和 MDS 矩阵。

template Poseidon2() {
    // t = 3 状态大小，d=5 非线性指数

    signal input in[3];    // 私有输入，3个field元素
    signal output out;     // 公开输出哈希值

    // 论文参数示范（简化版本，真实参数必须用官方参数）
    var rounds_full = 8;   // 轮数示例
    var rounds_partial = 57; // 可调整，示意
    var t = 3;
    var d = 5;

    // 伪造一组轮常量，真实用法请用官方参数
    var round_constants = [
        [1, 2, 3], [4, 5, 6], [7,8,9], [10,11,12],
        [13,14,15], [16,17,18], [19,20,21], [22,23,24],
        [25,26,27], [28,29,30], [31,32,33], [34,35,36],
        [37,38,39], [40,41,42], [43,44,45], [46,47,48],
        [49,50,51], [52,53,54], [55,56,57], [58,59,60],
        [61,62,63], [64,65,66], [67,68,69], [70,71,72],
        [73,74,75], [76,77,78], [79,80,81], [82,83,84],
        [85,86,87], [88,89,90], [91,92,93], [94,95,96],
        [97,98,99], [100,101,102], [103,104,105], [106,107,108],
        [109,110,111], [112,113,114], [115,116,117], [118,119,120],
        [121,122,123], [124,125,126], [127,128,129], [130,131,132],
        [133,134,135], [136,137,138], [139,140,141], [142,143,144],
        [145,146,147], [148,149,150], [151,152,153], [154,155,156],
        [157,158,159], [160,161,162], [163,164,165], [166,167,168],
        [169,170,171], [172,173,174], [175,176,177], [178,179,180],
        [181,182,183], [184,185,186], [187,188,189], [190,191,192],
        [193,194,195], [196,197,198], [199,200,201], [202,203,204],
        [205,206,207], [208,209,210], [211,212,213], [214,215,216],
        [217,218,219]
    ];

    // 简单MDS矩阵示范
    var MDS = [
        [2,3,1],
        [1,2,3],
        [3,1,2]
    ];

    // S-box: x -> x^5 mod prime (field arithmetic自动处理)
    function sbox(x) {
        // x^5 = x * x^4 = x * (x^2)^2
        var x2 = x * x;
        var x4 = x2 * x2;
        return x * x4;
    }

    // 复制输入到状态
    var state = [in[0], in[1], in[2]];

    // 模拟一轮完整的Poseidon2迭代
    for (var r = 0; r < rounds_full + rounds_partial; r++) {
        // Add round constants
        for (var i=0; i<t; i++) {
            state[i] = state[i] + round_constants[r][i];
        }
        // S-box
        if (r < rounds_full) {
            // full rounds: 对所有元素使用非线性 S-box
            for (var i=0; i<t; i++) {
                state[i] = sbox(state[i]);
            }
        } else {
            // partial rounds: 只对第一个元素做S-box
            state[0] = sbox(state[0]);
            // 其他元素保持线性
        }
        // MDS矩阵乘法（线性混合）
        var new_state = [0,0,0];
        for (var i=0; i<t; i++) {
            for (var j=0; j<t; j++) {
                new_state[i] += MDS[i][j] * state[j];
            }
        }
        state = new_state;
    }

    out <== state[0]; // 返回第一个元素作为哈希输出
}

component main = Poseidon2();

